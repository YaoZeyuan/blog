@startuml

autonumber

title: js-Native双向通信流程

==初始命令id:40==

==第一次调用原生接口==

业务方 -[#red]> 基础库 : 调用原生应用接口1

基础库 -[#red]> 基础库 : 命令id+1 => 41 , 在待回调对象中注册命令41, 等待原生接口执行完成
基础库 -[#red]> Native : 调用 传入命令id:41, 接口名1, 参数值. 控制流交给Native, V8暂停执行
Native -[#red]> 基础库 : 读取命令id:41, 待调用接口名1, 参数值. 结束函数执行, 恢复V8运行
基础库 -[#red]> 业务方: 原生应用接口1调用完成, 通知业务方等待回调

Native -[#red]> Native : 执行接口1调用

==第二次调用原生接口==

业务方 -[#blue]> 基础库 : 调用原生应用接口2
基础库 -[#blue]> 基础库 : 命令id+1 => 42 , 在待回调对象中注册命令42, 等待原生接口执行完成
基础库 -[#blue]> Native : 调用 传入命令id:42, 接口名2, 参数值. 控制流交给Native, V8暂停执行
Native -[#blue]> 基础库 : 读取命令id:42, 待调用接口名2, 参数值. 结束函数执行, 恢复V8运行
基础库 -[#blue]> 业务方: 原生应用接口2调用完成, 通知业务方等待回调

==第一次调用原生接口执行完成==

Native -[#red]> Native : 接口1调用执行完成, 得到结果
Native -[#red]> 基础库 : 调用基础库回调接口, 返回命令id:41 对应的返回结果
基础库 -[#red]> 基础库: 解析Native在调用中传入的参数, 找到待回调对象中id为41所对应的回调
基础库 -[#red]> 业务方: 执行命令41对应的回调函数, 通知业务方回调完成, 返回调用结果

==第二次调用原生接口执行完成==


Native -[#blue]> Native : 接口2调用执行完成, 得到结果
Native -[#blue]> 基础库 : 调用基础库回调接口, 返回命令id:42 对应的返回结果
基础库 -[#blue]> 基础库: 解析Native在调用中传入的参数, 找到待回调对象中id为42所对应的回调
基础库 -[#blue]> 业务方: 执行命令42对应的回调函数, 通知业务方回调完成, 返回调用结果


@enduml